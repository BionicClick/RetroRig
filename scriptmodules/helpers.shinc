#!/bin/bash
#
# RetroRig helper modules
# This is a small script to copy over configuration files for emulators
# append a "-x" on the end above for debugging if need be
# Please report any errors via a pull request
# You can also reach me on twitter: @N3RD42
#

h_ps3_blu_check()
{

	if [ -z 'grep "PLAYSTATION(R)3" "/proc/bus/input/devices"' ]; then
		# not set, echo below fore TESTING ONLY!!!
		# set ps3_blu_complete to 0 for false
		dialog --infobox "Your controller is still turned on!" 3 39
		ps3_blu_complete="0"	
		sleep 2s
	else
		# Let user know pairing is complete
		dialog --infobox "Pairing on controller via bluetooth complete" 3 48
		sleep 2s
		# set ps3_blu_complete to 1 for true
		ps3_blu_complete="1"	
		sleep 2s
	fi
}

h_clean_gamepad()
{
	clear
	# The purpose of this function is to clean any specific configs that may 
	# have altered files you would need for changing your gamepad type

	# system objects that may interfere with switching gamepads
	# The rescan service should be able to coexist with xboxdrv
	
	# qjoypad 
	rm -f "$home/.config/autostart/qjoypad.desktop"

	# XBMC keymaps
	rm -f "$xbmc_home/userdata/keymaps/keyboard.xml"

	# Xbox controller 
	service xboxdrv stop
	rm -f /etc/init.d/xboxdrv
	rm -f /etc/default/xboxdrv

	# clean init scripts (rescan service shouldn't need cleaned right now)
	# If it is required later, it will fall here.
	update-rc.d -f xboxdrv remove

	# XBMC
	rm -f "$xbmc_home/userdata/keymaps/keyboard.xml"
}


h_autosave_configs()
{

	# This section serves to backup existing configs when a user starts the install
	# Directory checks will likely be put in soon.
	# Old files, aka originals when ran, will be appended with ".old"

	# backup $home/.xbmc as a good precaution, even though we don't use this
	# dotfile anymore
	cp "$home/.xbmc" "$home/.xbmc.old" > /dev/null 2>&1

	clear
	# home dotfiles:
	# This section is not needed anymore since we not use out own dotfile

	# system configs:
	cp "/etc/init.d/xboxdrv" "/etc/init.d/xboxdrv.old" > /dev/null 2>&1
	cp "/etc/init.d/rescan" "/etc/init.d/rescan.old" > /dev/null 2>&1
	cp "/etc/modprobe.d/blacklist.conf" "/etc/modprobe.d/blacklist.conf.old" > /dev/null 2>&1
	cp "/usr/share/xsessions/xbmc.desktop" "/usr/share/xsessions/xbmc.desktop.old" > /dev/null 2>&1
	cp "/usr/bin/xbmc-session" "/usr/bin/xbmc-session.old" > /dev/null 2>&1
	cp "/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf" "/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf.old" > /dev/null 2>&1

	# correct permissions after tar archive is created
	h_correct_perms

}


h_restore_configs()
{

	# This section serves to restore existing configs when a user starts the install
	# Directory checks will likely be put in soon.
	# new files, aka new when installed, will be renamed without".old"

	# home dotfiles:
	# This section is not needed anymore since we not use out own dotfile

	# system configs:
	mv "/etc/xdg/autostart/xbmc.old" "/etc/xdg/autostart/xbmc" > /dev/null 2>&1
	mv "/etc/init.d/xboxdrv.old" "/etc/init.d/xboxdrv" > /dev/null 2>&1
	mv "/etc/modprobe.d/blacklist.conf.old" "/etc/modprobe.d/blacklist.conf" > /dev/null 2>&1
	mv "/usr/share/xsessions/xbmc.desktop.old" "/usr/share/xsessions/xbmc.desktop" > /dev/null 2>&1
	mv "/usr/bin/xbmc-session.old" "/usr/bin/xbmc-session" > /dev/null 2>&1
	mv "/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf.old" "/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf" > /dev/null 2>&1

	# correct permissions after tar archive is created
	h_correct_perms

	# inform user <- should the user be bothered each time?
	# dialog --msgbox "All existing .old configs restored sans .old" 5 48

}


function h_plugin_switcher()
{

cmd=(dialog --backtitle "LibreGeek.org RetroRig Installer" --menu "Plugin Configuration Menu" 16 0 16)
options=(1 "Current configuration"
	 2 "Mupen64plus"
	 3 "Back to settings menu"  
	 4 "Back to main menu")

	#make menu choice
	selection=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
	#functions

	for choice in $selection
	do
		case $choice in

		1)
		#echo curent plugin settings
		#mupen64plus
		echo "Mupen64plus:" > res.txt
		grep -i "VideoPlugin = " "$config_home/.config/mupen64plus/mupen64plus.cfg" >> "$scriptdir/logs/res.txt"
		echo "" >> "$scriptdir/logs/res.txt"
		#Stella
		echo "Stella:" >> "$scriptdir/logs/res.txt"
		grep -i "tia_filter" "$config_home/.stella/stellarc" >> "$scriptdir/logs/res.txt"
		echo "" >> res.txt
		#report current resolution
		dialog --textbox res.txt 33 0
		#remove text file
		rm "$scriptdir/logs/res.txt"	
		;;

		2)
		#cfg_mupen 	  	 	
		;;

		3)
		return 	  	 	
		;;

		4)
		_main 	 	
		;;
	esac
	done

}

function h_file_loader()
{

	dialog --msgbox "Usage:\n\nChoose the *FOLDER*, not the file(s) you wish to load ROMs from. Esc or Cancel to abort\n\n
	(spacebar)                Select file\n
	(double-tap spacebar)     Enter new directory\n
	(Enter)                   Confirm selection\n
	(Arrow keys)              Navigate" 15 50
        

	folder=$(dialog --stdout --cr-wrap --title "Please choose a file" --fselect "$home/" 14 48)

	response=$?
        case $response in
           0)
           #echo $folder
           #sleep 3s
           #continue on to next function
           ;;

           1)
           dialog --infobox "Cancelled..."  3 16
           sleep 2s
           # set folder to blank
           folder=""
           ;;

           255)
           dialog --infobox "Esc hit..." 3 14
           folder=""
           sleep 2s

	esac

	# debugging only
	# echo "${folder} file chosen." >> "$rootdir/logs/debug.log"

	clear
}

function h_rom_loader()
{


while true; do
cmd=(dialog --backtitle "LibreGeek.org RetroRig Installer" --menu "Load ROMs for which system?" 20 32 24)
options=(1 "Atari 2600" 
	 2 "NES" 
	 3 "SNES" 
	 4 "Nintendo 64"
	 5 "MAME"
	 6 "Sega Master System"
	 7 "Sega Game Gear"
	 8 "GBC"
	 9 "GBC"
	 10 "TurboGraphx 16"
	 11 "Neo-Geo CDZ"
	 12 "PSP"
	 13 "PSX/PS1"
	 14 "Exit ROM Loader")

	#make menu choice
	choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
	#functions

	if [ "$choices" != "" ]; then
	    case $choices in

		1)
		#call file loader  	
		h_file_loader
		#copy Atari ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Atari 2600"
		fi
		;;

		2)
		#call file loader
		h_file_loader
		#copy NES ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/NES/"
		fi
		;;

		3)
		#call file loader  	
		h_file_loader
		#copy SNES ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/SNES/"
		fi
		;;

		4)
		#call file loader  	
		h_file_loader
		#copy N64 ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/N64/"
		fi
		;;

		5)
		#call file loader  	
		h_file_loader
		#copy MAME ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/MAME/"
		fi
		;;

		6)
		#call file loader  	
		h_file_loader
		#copy Sega Master System ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Sega Master System"
		fi
		;;

		7)
		#call file loader  	
		h_file_loader
		#copy Sega Game Gear ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Sega Game Gear"
		fi
		;;

		8)
		#call file loader  	
		h_file_loader
		#copy GBC ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/GBC/"
		fi
		;;

		9)
		#call file loader  	
		h_file-loader
		#copy GBA ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/GBA/"
		fi
		;;

		10)
		#call file loader  	
		h_file_loader
		#copy Turbographx 16 ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/TurboGraphx 16/"
		fi
		;;

		11)  
		#call file loader  	
		h_file_loader
		#copy Neo-Geo CDZ ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Neo-Geo/CDZ/"
		fi
		;;

		12)  
		#call file loader  	
		h_file_loader
		#copy PSP ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/PSP/"
		fi
		;;

		13)  
		#call file loader  	
		h_file_loader
		#copy PSX/PS1 ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/PS1/"
		fi
		;;

		14)  
		return
		;;

		255)  
           	dialog --infobox "Esc hit..." 3 14
           	sleep 1s
		;;

		esac
	else
		break
	fi
done

	# correct permissions
	h_correct_perms
}

function h_res_switcher()
{
	dialog --infobox "Setting resolution to selection" 3 36
	#resolution is set via _resolution function		
	
	########################		
	#Stella
	########################
	st_org=$(grep -Ee "\bfullres = \b" "$config_home/.stella/stellarc")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$st_org|fullres = $st_new|g" "$config_home/.stella/stellarc"

	########################		
	#mupen64plus
	########################
	m_org_X=$(grep -Ee "\bScreenWidth = \b" "$config_home/.config/mupen64plus/mupen64plus.cfg")
	m_org_Y=$(grep -Ee "\bScreenHeight = \b" "$config_home/.config/mupen64plus/mupen64plus.cfg")
	#make the changes, prefix new_X in case NULL was entered previousey
	sed -i "s|$m_org_X|ScreenWidth = $m_new_X|g" "$config_home/.config/mupen64plus/mupen64plus.cfg"
	sed -i "s|$m_org_Y|ScreenHeight = $m_new_Y|g" "$config_home/.config/mupen64plus/mupen64plus.cfg"

	########################		
	#mednafen 
	######################## 

	#Emulator Codes:
	########################
	#Atari Lynx [lynx]
	#GameBoy (Color) [gb]
	#GameBoy Advance [gba]
	#Neo Geo Pocket (Color) [ngp]
	#Nintendo Entertainment System/Famicom [nes]
	#PC Engine (CD)/TurboGrafx 16 (CD)/SuperGrafx [pce]
	#PC Engine (CD)/TurboGrafx 16 (CD)/SuperGrafx [pce_fast]
	#PC-FX [pcfx]
	#Sega Game Gear [gg]
	#Sega Genesis/MegaDrive [md]
	#Sega Master System [sms]
	#Sony PlayStation [psx]
	#Super Nintendo Entertainment System/Super Famicom [snes]
	#Virtual Boy [vb]
	#WonderSwan [wswan]

	#Note: it should be noted that all emulators are set to aspect ratios
	#the screen (EMU_CODE.aspect. See the wiki for more

	#Mednafen (GBC)
	gb_org_X=$(grep -Ee "\bgb.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	gb_org_Y=$(grep -Ee "\bgb.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$gb_org_X|gb.xres $gb_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$gb_org_Y|gb.yres $gb_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (NES)
	nes_org_X=$(grep -Ee "\bnes.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	nes_org_Y=$(grep -Ee "\bnes.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$nes_org_X|nes.xres $nes_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$nes_org_Y|nes.yres $nes_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (GameBoy Advance)
	gba_org_X=$(grep -Ee "\bgba.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	gba_org_Y=$(grep -Ee "\bgba.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$gba_org_X|gba.xres $gba_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$gba_org_Y|gba.yres $gba_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (SNES)
	snes_org_X=$(grep -Ee "\bsnes.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	snes_org_Y=$(grep -Ee "\bsnes.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$snes_org_X|snes.xres $snes_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$snes_org_Y|snes.yres $snes_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (Sega Master System, aka Sega Sega Master)
	sms_org_X=$(grep -Ee "\bsms.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	sms_org_Y=$(grep -Ee "\bsms.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$sms_org_X|sms.xres $sms_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$sms_org_Y|sms.yres $sms_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (Sega Game Gear)
	gg_org_X=$(grep -Ee "\bgg.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	gg_org_Y=$(grep -Ee "\bgg.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$gg_org_X|gg.xres $gg_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$gg_org_Y|gg.yres $gg_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (Turbographx 16)
	pce_org_X=$(grep -Ee "\bpce.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	pce_org_Y=$(grep -Ee "\bpce.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$pce_org_X|pce.xres $pce_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$pce_org_Y|pce.yres $pce_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (PSX)
	psx_org_X=$(grep -Ee "\bpsx.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	psx_org_Y=$(grep -Ee "\bpsx.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$psx_org_X|psx.xres $psx_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$psx_org_Y|psx.yres $psx_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	# correct permissions
	h_correct_perms
}


function h_bios_checker()
{

	# BIOS file checks
	clear
	echo "Checking for Bios files (if applicable)..." | tee >> "$rootdir/logs/debug.log"
	echo ""
	sleep 3s

	# MESS -g BIOS files
	h_filechecker 
"$rootdir/ROMs/BIOS/MESS" 
	# output something to user, so they don't necessarily have to check the debug log
	echo "BIOS directory contains: "
	ls "$rootdir/BIOS/MESS"
	echo ""

	# If MESS is loaded already, verify BIOS files
	/usr/games/mess neocdz -verifyroms

	#hold for review
	sleep 5s

}

function h_bios_loader()
{
	
# present menu

cmd=(dialog --backtitle "LibreGeek.org RetroRig Installer" --menu "Load BIOS files for which system?" 19 32 24)
options=(1 "Neo-Geo CDZ"
	 2 "Commodore 64" 
	 3 "Exit BIOS Loader")

	#make menu choice
	selection=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
	#functions

	for choice in $selection
	do
		case $choice in

		1)
		# call file loader  	
		h_file_loader
		# copy Neo-Geo BIOS file over to MESS (root emulator)
		if [ -n "$folder" ]; then
			cp -v "$folder" "$rootdir/BIOS/MESS"
		fi
		;;

		2)
		#call file loader
		h_file_loader
		# copy Commodore 64 BIOS file over to MESS (root emulator)
		if [ -n "$folder" ]; then
			cp -v "$folder" "$rootdir/BIOS/MESS"
		fi
		;;

		3)
		return
		;;

		esac
	done
	
	#fix persmissions, post-copy
	h_correct_perms

}

function h_correct_perms()
{

	# inform user of permissions corrections
	clear
	echo "Correcting permissions on folders due to use of sudo."
	echo "Please wait..."

	# correct permissions since we use sudo
	chgrp -Rv "$user" "$rootdir" > /dev/null 2>&1
    	chown -Rv "$user" "$rootdir" > /dev/null 2>&1

	# correct the desktop permissions so we can add our own launcher
	# This will allow permissions change for all languages. Thanks JC!
	chmod -Rv 755 $xdg_desktop_dir > /dev/null 2>&1
	chown -Rv $user $xdg_desktop_dir > /dev/null 2>&1
	chgrp -Rv $user $xdg_desktop_dir > /dev/null 2>&1

	# replace "test" username in config files here to ensure games
	# and emulators function and start properly
	
	# .retrorig
	chgrp -R "$user" "$config_home" > /dev/null 2>&1
     	chown -R "$user" "$config_home" > /dev/null 2>&1

	# xbmc dotfile (our custom path)
	chgrp -R "$user" "$xbmc_home" > /dev/null 2>&1
     	chown -R "$user" "$xbmc_home" > /dev/null 2>&1

	# qjoypad files from user home directory
	chgrp -R "$user" "$home/.qjoypad3" > /dev/null 2>&1
     	chown -R "$user" "$home/.qjoypad3" > /dev/null 2>&1

	# XBMC gamepad auto-detect helper
	chgrp -R "$user" "/usr/share/applications/gp_autodetect_xbmc.sh" > /dev/null 2>&1
     	chown -R "$user" "/usr/share/applications/gp_autodetect_xbmc.sh" > /dev/null 2>&1
	chmod ugo+x "/usr/share/applications/gp_autodetect_xbmc.sh" > /dev/null 2>&1

	# start script for RetroRig application
	chgrp -R "$user" "/usr/share/applications/startXBMC.sh" > /dev/null 2>&1
	chown -R "$user" "/usr/share/applications/startXBMC.sh" > /dev/null 2>&1
	chmod ugo+x "/usr/share/applications/startXBMC.sh" > /dev/null 2>&1

	# RetroRig autostart file
	chgrp -R "$user" "$home/.config/autostart/RetroRig.desktop" > /dev/null 2>&1
	chown -R "$user" "$home/.config/autostart/RetroRig.desktop" > /dev/null 2>&1
	chmod ugo+x "$home/.config/autostart/RetroRig.desktop" > /dev/null 2>&1

	# qjoypad autostart file
	chgrp -R "$user" "$home/.config/autostart/qjoypad.desktop" > /dev/null 2>&1
	chown -R "$user" "$home/.config/autostart/qjoypad.desktop" > /dev/null 2>&1

	# Pictures directory
	chgrp -R "$user" "$xdg_pictures_dir/retro-icon.png" > /dev/null 2>&1
	chown -R "$user" "$xdg_pictures_dir/retro-icon.png" > /dev/null 2>&1

	# correct our own start file for retrorig
	chmod ugo+x /usr/bin/xbmc-retrorig

	# xboxdrv init script
	chmod 755 /etc/init.d/xboxdrv > /dev/null 2>&1
	chmod 755 /etc/default/xboxdrv > /dev/null 2>&1
}

function h_emu_user_fixes()
{

	# set the system user to an absolute value for files that require it
	# RCB and some config files don't like using $config_home, rather /home/test/
	# Let's change the config files to reflect the current username

	
	# mame
	sed -i "s|/home/test/RetroRig|$rootdir|g" $config_home/.mame/mame.ini | tee >> "$rootdir/logs/debug.log"
	
	# MESS
	sed -i "s|/home/test/RetroRig|$rootdir|g" $config_home/.mess/mess.ini | tee >> "$rootdir/logs/debug.log"
	
	# XBMC
	sed -i "s|/home/test/|/home/$user/|g" "$xbmc_home/userdata/addon_data/script.games.rom.collection.browser/config.xml" | tee >> "$rootdir/logs/debug.log"
	
	# PPSSPP	
	sed -i 's|test|$user|g' "$scriptdir/emu-cfgs/x360_controller/PPSSPP/ppsspp.ini"

	# Mednafen firmware location
	sed -i "s|/home/test/RetroRig|$rootdir|g" "$config_home/.mednafen/mednafen-09x.cfg"

	# echo change
	echo "The user applied to configuration files was: $user" | tee >> "$rootdir/logs/debug.log"
}

function h_filechecker()
{
    if [[ -e "$1" ]]; then
        ls -lh "$1" | tee >> "$rootdir/logs/debug.log"
    else
        echo "$1 does not exist!" | tee >> "$rootdir/logs/debug.log"
    fi
}

function h_pkgcheck()
{
    PKG_OK=$(dpkg-query -s "$1" | egrep -w "Status|Package|Version")
    echo "Checking for somelib: $PKG_OK"
    if [ "" == "$PKG_OK" ]; then
        echo "NOT INSTALLED: $1" >> "$rootdir/logs/debug.log"
    else
        echo "installed: $1" >> "$rootdir/logs/debug.log"
    fi
}

function h_update_git() 
{

echo "Fetching latest version of the RetroRig Setup Script."
pushd "$scriptdir"

if [[ ! -d ".git" ]]; then
	dialog --backtitle "LibreGeek.org - RetroRig Setup." --msgbox "Cannot find direcotry 	'.git'. Please clone the RetroRig setup script via \
	'git clone https://github.com/ProfessorKaos64/RetroRig'" 20 60
	popd
	return
fi
git pull
#pause for quick review
sleep 3s
popd

dialog --backtitle "LibreGeek.org - RetroRig Setup." --msgbox "Fetched the latest version of the RetroRig repository. Please exit and restart the script." 7 60 
}

function h_update_system() 
{


# Update binaries that were installed via PPA's and Official Ubuntu repos
apt-get update -y
sleep 3s
clear

}

function h_upgrade_system() 
{

clear
apt-get update -y
apt-get upgrade -y
sleep 3s
clear

}
